// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class DonationReceived extends ethereum.Event {
  get params(): DonationReceived__Params {
    return new DonationReceived__Params(this);
  }
}

export class DonationReceived__Params {
  _event: DonationReceived;

  constructor(event: DonationReceived) {
    this._event = event;
  }

  get projectId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get donor(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FundsRefunded extends ethereum.Event {
  get params(): FundsRefunded__Params {
    return new FundsRefunded__Params(this);
  }
}

export class FundsRefunded__Params {
  _event: FundsRefunded;

  constructor(event: FundsRefunded) {
    this._event = event;
  }

  get projectId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ProjectCreated extends ethereum.Event {
  get params(): ProjectCreated__Params {
    return new ProjectCreated__Params(this);
  }
}

export class ProjectCreated__Params {
  _event: ProjectCreated;

  constructor(event: ProjectCreated) {
    this._event = event;
  }

  get projectId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[2].value.toString();
  }

  get description(): string {
    return this._event.parameters[3].value.toString();
  }

  get goal(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get startTime(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class WithdrawalExecuted extends ethereum.Event {
  get params(): WithdrawalExecuted__Params {
    return new WithdrawalExecuted__Params(this);
  }
}

export class WithdrawalExecuted__Params {
  _event: WithdrawalExecuted;

  constructor(event: WithdrawalExecuted) {
    this._event = event;
  }

  get projectId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get requestId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class WithdrawalRequested extends ethereum.Event {
  get params(): WithdrawalRequested__Params {
    return new WithdrawalRequested__Params(this);
  }
}

export class WithdrawalRequested__Params {
  _event: WithdrawalRequested;

  constructor(event: WithdrawalRequested) {
    this._event = event;
  }

  get projectId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get requestId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get startTime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class WithdrawalVoted extends ethereum.Event {
  get params(): WithdrawalVoted__Params {
    return new WithdrawalVoted__Params(this);
  }
}

export class WithdrawalVoted__Params {
  _event: WithdrawalVoted;

  constructor(event: WithdrawalVoted) {
    this._event = event;
  }

  get projectId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get requestId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get approve(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Crowdfunding__getAllProjectsResult {
  value0: Array<Address>;
  value1: Array<string>;
  value2: Array<string>;
  value3: Array<BigInt>;
  value4: Array<BigInt>;
  value5: Array<BigInt>;
  value6: Array<BigInt>;

  constructor(
    value0: Array<Address>,
    value1: Array<string>,
    value2: Array<string>,
    value3: Array<BigInt>,
    value4: Array<BigInt>,
    value5: Array<BigInt>,
    value6: Array<BigInt>,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromStringArray(this.value1));
    map.set("value2", ethereum.Value.fromStringArray(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigIntArray(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigIntArray(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigIntArray(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigIntArray(this.value6));
    return map;
  }

  getValue0(): Array<Address> {
    return this.value0;
  }

  getValue1(): Array<string> {
    return this.value1;
  }

  getValue2(): Array<string> {
    return this.value2;
  }

  getValue3(): Array<BigInt> {
    return this.value3;
  }

  getValue4(): Array<BigInt> {
    return this.value4;
  }

  getValue5(): Array<BigInt> {
    return this.value5;
  }

  getValue6(): Array<BigInt> {
    return this.value6;
  }
}

export class Crowdfunding__getContributionsResult {
  value0: Array<Address>;
  value1: Array<BigInt>;

  constructor(value0: Array<Address>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }

  getValue0(): Array<Address> {
    return this.value0;
  }

  getValue1(): Array<BigInt> {
    return this.value1;
  }
}

export class Crowdfunding__getProjectDetailsResult {
  value0: Address;
  value1: string;
  value2: string;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: boolean;
  value8: BigInt;

  constructor(
    value0: Address,
    value1: string,
    value2: string,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: boolean,
    value8: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromBoolean(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    return map;
  }

  getValue0(): Address {
    return this.value0;
  }

  getValue1(): string {
    return this.value1;
  }

  getValue2(): string {
    return this.value2;
  }

  getValue3(): BigInt {
    return this.value3;
  }

  getValue4(): BigInt {
    return this.value4;
  }

  getValue5(): BigInt {
    return this.value5;
  }

  getValue6(): BigInt {
    return this.value6;
  }

  getValue7(): boolean {
    return this.value7;
  }

  getValue8(): BigInt {
    return this.value8;
  }
}

export class Crowdfunding__getUserVotesResult {
  value0: Array<Array<boolean>>;
  value1: Array<Array<boolean>>;

  constructor(value0: Array<Array<boolean>>, value1: Array<Array<boolean>>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBooleanMatrix(this.value0));
    map.set("value1", ethereum.Value.fromBooleanMatrix(this.value1));
    return map;
  }

  getValue0(): Array<Array<boolean>> {
    return this.value0;
  }

  getValue1(): Array<Array<boolean>> {
    return this.value1;
  }
}

export class Crowdfunding__projectsResult {
  value0: Address;
  value1: string;
  value2: string;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: boolean;

  constructor(
    value0: Address,
    value1: string,
    value2: string,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: boolean,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromBoolean(this.value8));
    return map;
  }

  getCreator(): Address {
    return this.value0;
  }

  getName(): string {
    return this.value1;
  }

  getDescription(): string {
    return this.value2;
  }

  getGoal(): BigInt {
    return this.value3;
  }

  getStartTime(): BigInt {
    return this.value4;
  }

  getEndTime(): BigInt {
    return this.value5;
  }

  getFundsRaised(): BigInt {
    return this.value6;
  }

  getBalance(): BigInt {
    return this.value7;
  }

  getFundsRefunded(): boolean {
    return this.value8;
  }
}

export class Crowdfunding extends ethereum.SmartContract {
  static bind(address: Address): Crowdfunding {
    return new Crowdfunding("Crowdfunding", address);
  }

  createProject(
    name: string,
    description: string,
    goal: BigInt,
    duration: BigInt,
  ): BigInt {
    let result = super.call(
      "createProject",
      "createProject(string,string,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(description),
        ethereum.Value.fromUnsignedBigInt(goal),
        ethereum.Value.fromUnsignedBigInt(duration),
      ],
    );

    return result[0].toBigInt();
  }

  try_createProject(
    name: string,
    description: string,
    goal: BigInt,
    duration: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createProject",
      "createProject(string,string,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(description),
        ethereum.Value.fromUnsignedBigInt(goal),
        ethereum.Value.fromUnsignedBigInt(duration),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAllProjects(): Crowdfunding__getAllProjectsResult {
    let result = super.call(
      "getAllProjects",
      "getAllProjects():(address[],string[],string[],uint256[],uint256[],uint256[],uint256[])",
      [],
    );

    return new Crowdfunding__getAllProjectsResult(
      result[0].toAddressArray(),
      result[1].toStringArray(),
      result[2].toStringArray(),
      result[3].toBigIntArray(),
      result[4].toBigIntArray(),
      result[5].toBigIntArray(),
      result[6].toBigIntArray(),
    );
  }

  try_getAllProjects(): ethereum.CallResult<Crowdfunding__getAllProjectsResult> {
    let result = super.tryCall(
      "getAllProjects",
      "getAllProjects():(address[],string[],string[],uint256[],uint256[],uint256[],uint256[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Crowdfunding__getAllProjectsResult(
        value[0].toAddressArray(),
        value[1].toStringArray(),
        value[2].toStringArray(),
        value[3].toBigIntArray(),
        value[4].toBigIntArray(),
        value[5].toBigIntArray(),
        value[6].toBigIntArray(),
      ),
    );
  }

  getContributions(projectId: BigInt): Crowdfunding__getContributionsResult {
    let result = super.call(
      "getContributions",
      "getContributions(uint256):(address[],uint256[])",
      [ethereum.Value.fromUnsignedBigInt(projectId)],
    );

    return new Crowdfunding__getContributionsResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray(),
    );
  }

  try_getContributions(
    projectId: BigInt,
  ): ethereum.CallResult<Crowdfunding__getContributionsResult> {
    let result = super.tryCall(
      "getContributions",
      "getContributions(uint256):(address[],uint256[])",
      [ethereum.Value.fromUnsignedBigInt(projectId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Crowdfunding__getContributionsResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray(),
      ),
    );
  }

  getCreatorProjects(creator: Address): Array<BigInt> {
    let result = super.call(
      "getCreatorProjects",
      "getCreatorProjects(address):(uint256[])",
      [ethereum.Value.fromAddress(creator)],
    );

    return result[0].toBigIntArray();
  }

  try_getCreatorProjects(creator: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getCreatorProjects",
      "getCreatorProjects(address):(uint256[])",
      [ethereum.Value.fromAddress(creator)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getProjectDetails(projectId: BigInt): Crowdfunding__getProjectDetailsResult {
    let result = super.call(
      "getProjectDetails",
      "getProjectDetails(uint256):(address,string,string,uint256,uint256,uint256,uint256,bool,uint256)",
      [ethereum.Value.fromUnsignedBigInt(projectId)],
    );

    return new Crowdfunding__getProjectDetailsResult(
      result[0].toAddress(),
      result[1].toString(),
      result[2].toString(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBoolean(),
      result[8].toBigInt(),
    );
  }

  try_getProjectDetails(
    projectId: BigInt,
  ): ethereum.CallResult<Crowdfunding__getProjectDetailsResult> {
    let result = super.tryCall(
      "getProjectDetails",
      "getProjectDetails(uint256):(address,string,string,uint256,uint256,uint256,uint256,bool,uint256)",
      [ethereum.Value.fromUnsignedBigInt(projectId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Crowdfunding__getProjectDetailsResult(
        value[0].toAddress(),
        value[1].toString(),
        value[2].toString(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBoolean(),
        value[8].toBigInt(),
      ),
    );
  }

  getUserContributions(user: Address): Array<BigInt> {
    let result = super.call(
      "getUserContributions",
      "getUserContributions(address):(uint256[])",
      [ethereum.Value.fromAddress(user)],
    );

    return result[0].toBigIntArray();
  }

  try_getUserContributions(user: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getUserContributions",
      "getUserContributions(address):(uint256[])",
      [ethereum.Value.fromAddress(user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getUserVotes(user: Address): Crowdfunding__getUserVotesResult {
    let result = super.call(
      "getUserVotes",
      "getUserVotes(address):(bool[][],bool[][])",
      [ethereum.Value.fromAddress(user)],
    );

    return new Crowdfunding__getUserVotesResult(
      result[0].toBooleanMatrix(),
      result[1].toBooleanMatrix(),
    );
  }

  try_getUserVotes(
    user: Address,
  ): ethereum.CallResult<Crowdfunding__getUserVotesResult> {
    let result = super.tryCall(
      "getUserVotes",
      "getUserVotes(address):(bool[][],bool[][])",
      [ethereum.Value.fromAddress(user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Crowdfunding__getUserVotesResult(
        value[0].toBooleanMatrix(),
        value[1].toBooleanMatrix(),
      ),
    );
  }

  projects(param0: BigInt): Crowdfunding__projectsResult {
    let result = super.call(
      "projects",
      "projects(uint256):(address,string,string,uint256,uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new Crowdfunding__projectsResult(
      result[0].toAddress(),
      result[1].toString(),
      result[2].toString(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBoolean(),
    );
  }

  try_projects(
    param0: BigInt,
  ): ethereum.CallResult<Crowdfunding__projectsResult> {
    let result = super.tryCall(
      "projects",
      "projects(uint256):(address,string,string,uint256,uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Crowdfunding__projectsResult(
        value[0].toAddress(),
        value[1].toString(),
        value[2].toString(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBoolean(),
      ),
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get tokenAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateProjectCall extends ethereum.Call {
  get inputs(): CreateProjectCall__Inputs {
    return new CreateProjectCall__Inputs(this);
  }

  get outputs(): CreateProjectCall__Outputs {
    return new CreateProjectCall__Outputs(this);
  }
}

export class CreateProjectCall__Inputs {
  _call: CreateProjectCall;

  constructor(call: CreateProjectCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get description(): string {
    return this._call.inputValues[1].value.toString();
  }

  get goal(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get duration(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class CreateProjectCall__Outputs {
  _call: CreateProjectCall;

  constructor(call: CreateProjectCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DonateCall extends ethereum.Call {
  get inputs(): DonateCall__Inputs {
    return new DonateCall__Inputs(this);
  }

  get outputs(): DonateCall__Outputs {
    return new DonateCall__Outputs(this);
  }
}

export class DonateCall__Inputs {
  _call: DonateCall;

  constructor(call: DonateCall) {
    this._call = call;
  }

  get projectId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DonateCall__Outputs {
  _call: DonateCall;

  constructor(call: DonateCall) {
    this._call = call;
  }
}

export class ExecuteWithdrawalCall extends ethereum.Call {
  get inputs(): ExecuteWithdrawalCall__Inputs {
    return new ExecuteWithdrawalCall__Inputs(this);
  }

  get outputs(): ExecuteWithdrawalCall__Outputs {
    return new ExecuteWithdrawalCall__Outputs(this);
  }
}

export class ExecuteWithdrawalCall__Inputs {
  _call: ExecuteWithdrawalCall;

  constructor(call: ExecuteWithdrawalCall) {
    this._call = call;
  }

  get projectId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get requestId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ExecuteWithdrawalCall__Outputs {
  _call: ExecuteWithdrawalCall;

  constructor(call: ExecuteWithdrawalCall) {
    this._call = call;
  }
}

export class RefundCall extends ethereum.Call {
  get inputs(): RefundCall__Inputs {
    return new RefundCall__Inputs(this);
  }

  get outputs(): RefundCall__Outputs {
    return new RefundCall__Outputs(this);
  }
}

export class RefundCall__Inputs {
  _call: RefundCall;

  constructor(call: RefundCall) {
    this._call = call;
  }

  get projectId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RefundCall__Outputs {
  _call: RefundCall;

  constructor(call: RefundCall) {
    this._call = call;
  }
}

export class RequestWithdrawalCall extends ethereum.Call {
  get inputs(): RequestWithdrawalCall__Inputs {
    return new RequestWithdrawalCall__Inputs(this);
  }

  get outputs(): RequestWithdrawalCall__Outputs {
    return new RequestWithdrawalCall__Outputs(this);
  }
}

export class RequestWithdrawalCall__Inputs {
  _call: RequestWithdrawalCall;

  constructor(call: RequestWithdrawalCall) {
    this._call = call;
  }

  get projectId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get description(): string {
    return this._call.inputValues[1].value.toString();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get votingDuration(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class RequestWithdrawalCall__Outputs {
  _call: RequestWithdrawalCall;

  constructor(call: RequestWithdrawalCall) {
    this._call = call;
  }
}

export class VoteForWithdrawalCall extends ethereum.Call {
  get inputs(): VoteForWithdrawalCall__Inputs {
    return new VoteForWithdrawalCall__Inputs(this);
  }

  get outputs(): VoteForWithdrawalCall__Outputs {
    return new VoteForWithdrawalCall__Outputs(this);
  }
}

export class VoteForWithdrawalCall__Inputs {
  _call: VoteForWithdrawalCall;

  constructor(call: VoteForWithdrawalCall) {
    this._call = call;
  }

  get projectId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get requestId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get approve(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class VoteForWithdrawalCall__Outputs {
  _call: VoteForWithdrawalCall;

  constructor(call: VoteForWithdrawalCall) {
    this._call = call;
  }
}
